#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec  2 14:41:15 2018

@author: emily
"""
import tracking as t

import numpy as np
import matplotlib.pyplot as plt

from astropy.io import fits
from sklearn.decomposition import PCA 

hdulist = fits.open('/PATH TO /new_image.fits')  #path new FITS file, edit!!!
scidata = hdulist[0].data

def find_track(x,y):                                                             
    trackmap=[]
    t.get_track(trackmap, x,y)
    if len(trackmap)>=100:
        return(trackmap) 

lin_fits=[]

for x in range(11, len(scidata[0])):
    for y in range(len(scidata)-20): 
        if t.if_checked(x,y) == "yes":    #so we dont find the same clusters over and over
            continue
        else:
            track = find_track(x,y)
            if track!= None:
                pca=PCA(n_components=2)
                pca.fit(track)
                if abs(pca.components_[1][0])>=.9 or abs(pca.components_[1][1])>=.9:          #if first priciple eigenvector accounts for more than 90% of variance in direction, use                 #discounts clusters of no defined direction and erases track noise        
                    pca=PCA(n_components=1)
                    pca.fit(track)                                                            #fit linear fit to 1D track along first principle eigenvector
                    fixedtrack=pca.transform(track)
                    fixedtrack=pca.inverse_transform(fixedtrack)
                    i,j = zip(*fixedtrack)
                    fit = np.polyfit(j,i,1)
                    fit_fn = np.poly1d(fit)
                    lin_fits.append(fit_fn)
                    
#This block is optional, only necassary if you want to visualize the linear fits of all of the tracks 
#x=np.linspace(0, len(scidata[0]), 2200)
#for n in range(len(lin_fits)):
#    plt.plot(x, lin_fits[n](x))
#plt.xlabel('x position')
#plt.ylabel('y.position')
#plt.title('Linear fits of tracks')
#plt.savefig('/PATH TO/linfits.pdf')   #must edit for path!


heatmap=np.zeros((len(scidata)+200, len(scidata[0])+200))

for n in range(len(lin_fits)-1):
    for k in range(n+1, len(lin_fits)-n-1):
        for x in range(-100, len(scidata[0])+100):
            y=int(round(lin_fits[n](x), 0))
            if -100<y and len(scidata)+99>y:
                if y==int(round(lin_fits[k](x), 0)):
                    heatmap[y+100, x+100]+=1 
                    print("added")                            #add value of 1 to pixel for each intersection that occurs there
                    break

#this block bins the heatmap
def count_quares(heatmap, size):
    numxbin = int(len(heatmap[0])/size)
    numybin = int(len(heatmap)/size)
    heatmapa=np.zeros((numybin, numxbin))
    for y in range(numybin):
        for x in range(numxbin):
            total=0
            for j in range(size*y, size*(y+1)):
                count = np.sum(heatmap[j, size*x:size*(x+1)-1])
                total +=count
            heatmapa[y,x] = total
    return(heatmapa)
               
heatmapa=count_quares(heatmap, 40)
heatmapb=np.flip(heatmapa, axis=0)  #flip to match visualizations of array, where y=0 is at the top of image
fig, ax = plt.subplots()
im = ax.imshow(heatmapb, vmin=0, vmax=10, cmap="hot")
plt.colorbar(im, ax=ax, orientation='vertical', label='Number of Intersections', fraction=.03)
plt.title('Track Path Intersections')
plt.savefig('/PATH TO /heatmap.pdf')                                   #edit for path to new heatmap!!!
plt.show()
 

